# filter values between experiment start and end times
filter(TIMESTAMP >= '2023-06-27 3:20:00', # start date/time 2023-06-27 10:20:00
TIMESTAMP <= '2023-06-27 6:40:00') %>% # end date/time to be 2023-06-27 13:40:00
# isolate the time from the TIMESTAMP column
mutate(time = hms::as_hms(TIMESTAMP)) %>%
# assign water amount to experiment times/set by row
mutate(h2o_mL = case_when(row_number(time) == 1:3 ~ '0.1',
row_number(time) == 4:6 ~ '0.5',
row_number(time) == 7:9 ~ '1',
row_number(time) == 10:12 ~ '1.5',
row_number(time) == 13:15 ~ '2.0',
row_number(time) == 16:18 ~ '2.5',
row_number(time) == 19:21 ~ '3.0')) %>%
# calculate the mean of each water amount per LWS
group_by(h2o_mL) %>%
summarize(mean_lw17 = mean(LWmV_17ft_Avg),
mean_lw50 = mean(LWmV_50ft_Avg),
mean_lw66 = mean(LWmV_66ft_Avg)) %>%
# there was an issue with LWS 17ft during the 2.0g set, so remove this rounded value
mutate(mean_lw17 = if_else(round(mean_lw17) == 567,
NA,mean_lw17)) %>%
# make the table longer by adding a column identifying the LWS distance and
# adding the mV values to another column
pivot_longer(mean_lw17:mean_lw50, names_to = 'LWS_dist_ft', values_to = 'mV') %>%
# rename the LWS_dist_ft values to just state the distance number
mutate(LWS_dist_ft = case_when(LWS_dist_ft == "mean_lw17" ~ '17',
LWS_dist_ft == "mean_lw50" ~ '50')) %>%
# transform h2o_mL to register as numeric (run everything before this and then run this line)
mutate(h2o_mL = as.numeric(exp_lws_regression$h2o_mL))
exp_lws_regression <- read_csv('./data/clean_data/exp_processed_cr800_20230627.csv',
# transform column values to register as numeric
col_types = cols(LWmV_17ft_Avg = col_number(),
LWmV_50ft_Avg = col_number(), LWmV_66ft_Avg = col_number())) %>%
# select columns: TIMESTAMP, LWmV_17ft_Avg, LWmV_50ft_Avg
select(TIMESTAMP,LWmV_17ft_Avg,LWmV_50ft_Avg,LWmV_66ft_Avg) %>%
# filter values between experiment start and end times
filter(TIMESTAMP >= '2023-06-27 3:20:00', # start date/time 2023-06-27 10:20:00
TIMESTAMP <= '2023-06-27 6:40:00') %>% # end date/time to be 2023-06-27 13:40:00
# isolate the time from the TIMESTAMP column
mutate(time = hms::as_hms(TIMESTAMP)) %>%
# assign water amount to experiment times/set by row
mutate(h2o_mL = case_when(row_number(time) == 1:3 ~ '0.1',
row_number(time) == 4:6 ~ '0.5',
row_number(time) == 7:9 ~ '1',
row_number(time) == 10:12 ~ '1.5',
row_number(time) == 13:15 ~ '2.0',
row_number(time) == 16:18 ~ '2.5',
row_number(time) == 19:21 ~ '3.0')) %>%
# calculate the mean of each water amount per LWS
group_by(h2o_mL) %>%
summarize(mean_lw17 = mean(LWmV_17ft_Avg),
mean_lw50 = mean(LWmV_50ft_Avg),
mean_lw66 = mean(LWmV_66ft_Avg)) %>%
# there was an issue with LWS 17ft during the 2.0g set, so remove this rounded value
mutate(mean_lw17 = if_else(round(mean_lw17) == 567,
NA,mean_lw17)) %>%
# make the table longer by adding a column identifying the LWS distance and
# adding the mV values to another column
pivot_longer(mean_lw17:mean_lw50, names_to = 'LWS_dist_ft', values_to = 'mV') %>%
# rename the LWS_dist_ft values to just state the distance number
mutate(LWS_dist_ft = case_when(LWS_dist_ft == "mean_lw17" ~ '17',
LWS_dist_ft == "mean_lw50" ~ '50'))
# load & clean up experiment data
exp_lws_regression <- read_csv('./data/clean_data/exp_processed_cr800_20230627.csv',
# transform column values to register as numeric
col_types = cols(LWmV_17ft_Avg = col_number(),
LWmV_50ft_Avg = col_number(), LWmV_66ft_Avg = col_number())) %>%
# select columns: TIMESTAMP, LWmV_17ft_Avg, LWmV_50ft_Avg
select(TIMESTAMP,LWmV_17ft_Avg,LWmV_50ft_Avg,LWmV_66ft_Avg) %>%
# filter values between experiment start and end times
filter(TIMESTAMP >= '2023-06-27 3:20:00', # start date/time 2023-06-27 10:20:00
TIMESTAMP <= '2023-06-27 6:40:00') %>% # end date/time to be 2023-06-27 13:40:00
# isolate the time from the TIMESTAMP column
mutate(time = hms::as_hms(TIMESTAMP)) %>%
# assign water amount to experiment times/set by row
mutate(h2o_mL = case_when(row_number(time) == 1:3 ~ '0.1',
row_number(time) == 4:6 ~ '0.5',
row_number(time) == 7:9 ~ '1',
row_number(time) == 10:12 ~ '1.5',
row_number(time) == 13:15 ~ '2.0',
row_number(time) == 16:18 ~ '2.5',
row_number(time) == 19:21 ~ '3.0')) %>%
# calculate the mean of each water amount per LWS
group_by(h2o_mL) %>%
summarize(mean_lw17 = mean(LWmV_17ft_Avg),
mean_lw50 = mean(LWmV_50ft_Avg),
mean_lw66 = mean(LWmV_66ft_Avg)) %>%
# there was an issue with LWS 17ft during the 2.0g set, so remove this rounded value
mutate(mean_lw17 = if_else(round(mean_lw17) == 567,
NA,mean_lw17)) %>%
# make the table longer by adding a column identifying the LWS distance and
# adding the mV values to another column
pivot_longer(mean_lw17:mean_lw50, names_to = 'LWS_dist_ft', values_to = 'mV') %>%
# rename the LWS_dist_ft values to just state the distance number
mutate(LWS_dist_ft = case_when(LWS_dist_ft == "mean_lw17" ~ '17',
LWS_dist_ft == "mean_lw50" ~ '50')) %>%
# transform h2o_mL to register as numeric (run everything before this and then run this line)
mutate(h2o_mL = as.numeric(h2o_mL))
# calculate regression values and print values in console
reg <- lm(formula = mV ~ h2o_mL, data = exp_lws_regression)
head(exp_lws_regression)
summary(reg)
# calculate the average of 66ft LWS (fog threshold) DO NOT USE
threshold = exp_lws_regression %>%
mutate(threshold = mean(mean_lw66))
# create figure: point graph & regression line
ggplot(data = exp_lws_regression,
mapping = aes(x = h2o_mL, y = mV, color = 'mV')) +
# plot points separately (LWS 17ft/50ft & 66ft)
geom_point() +
geom_point(data = exp_lws_regression,
mapping = aes(x = h2o_mL, y = mean_lw66, group = mean_lw66, color = 'mean_lw66')) +
# plot linear regression line
geom_smooth(method = 'lm') +
# change x-axis scale (min = 0, max = 3, scale = 0.5)
scale_x_continuous(breaks = seq(0,3,0.5)) +
# remove size legend
guides(size = FALSE) +
# rename the x-axis
xlab(expression("H"[2]*"O"~"(mL)")) +
# rename the y-axis
ylab('Leaf Wetness (mV)') +
# rename legend title
labs(colour = 'Leaf Wetness Sensor') +
# rename label values and assign colors/theme
scale_color_manual(values = c("dodgerblue3","brown3"),
labels = c('66ft Sensor', '17ft & 50ft Sensors')) +
theme_classic() +
# change the axis line thickness
theme(axis.line=element_line(size=1))+
# change the axis labels color and font size
theme(axis.text=element_text(colour = 'black',size=15)) +
# change the axis titles font size and make labels bold
theme(axis.title=element_text(size=20)) +
# change legend title and text font size
theme(legend.title = element_text(size=15),
legend.text = element_text(size=12))
# save figure as a .jpg file (change size if needed)
ggsave('./figs/lws_exp_stations_esa.jpg', width = 8, height = 6)
# load & clean up processed fog data
fog_presence <- read_csv('./clean_data/Combined_FogMon_Data2023.csv') %>%
# selecting rows where rain total is less than or equal to 0 mm
# no rain = fog
subset(Rain_mm_Tot <= 0) %>%
# select columns 1 (Station), 2 (halfhour), 5 (LWmV_17ft_Avg), 10 (LWmV_50ft_Avg),
# and 15 (LWmV_66ft_Avg)
select(c(1,2,5,10,15)) %>%
# remove any rows with missing data
remove_missing() %>%
# calculate the average of each LWS by halfhour and station
group_by(halfhour, Station) %>%
summarize(avg_lw17 = mean(LWmV_17ft_Avg),
avg_lw50 = mean(LWmV_50ft_Avg),
avg_lw66 = mean(LWmV_66ft_Avg)) %>%
# make the table longer by adding a column identifying the LWS distance and
# adding the mV values to another column
pivot_longer(avg_lw17:avg_lw66, names_to = 'LWS_dist_ft', values_to = 'mV') %>%
mutate(day = date(halfhour)) %>%
# calculate the average leaf wetness mV by halfhour and station
group_by(day, Station) %>%
summarize(mean_lw = mean(mV)) %>%
# subtract fog threshold (335.9 mV, intercept of the calculated regression line)
mutate(mean_lw = mean_lw - 335.9) %>%
# rename stations
mutate(Station = case_when( Station == 'Event Bluff' ~ 'Ocean-Side, High Elevation',
Station == 'Tide Pool' ~ 'Ocean-Side, Low Elevation',
Station == 'Spicy Bunker' ~ 'Bay-Side, Mid-Elevation',
Station == 'New New' ~ 'Ocean-Side, Mid-Elevation'))
# load & clean up processed fog data
fog_presence <- read_csv('./data/clean_data/Combined_FogMon_Data2023.csv') %>%
# selecting rows where rain total is less than or equal to 0 mm
# no rain = fog
subset(Rain_mm_Tot <= 0) %>%
# select columns 1 (Station), 2 (halfhour), 5 (LWmV_17ft_Avg), 10 (LWmV_50ft_Avg),
# and 15 (LWmV_66ft_Avg)
select(c(1,2,5,10,15)) %>%
# remove any rows with missing data
remove_missing() %>%
# calculate the average of each LWS by halfhour and station
group_by(halfhour, Station) %>%
summarize(avg_lw17 = mean(LWmV_17ft_Avg),
avg_lw50 = mean(LWmV_50ft_Avg),
avg_lw66 = mean(LWmV_66ft_Avg)) %>%
# make the table longer by adding a column identifying the LWS distance and
# adding the mV values to another column
pivot_longer(avg_lw17:avg_lw66, names_to = 'LWS_dist_ft', values_to = 'mV') %>%
mutate(day = date(halfhour)) %>%
# calculate the average leaf wetness mV by halfhour and station
group_by(day, Station) %>%
summarize(mean_lw = mean(mV)) %>%
# subtract fog threshold (335.9 mV, intercept of the calculated regression line)
mutate(mean_lw = mean_lw - 335.9) %>%
# rename stations
mutate(Station = case_when( Station == 'Event Bluff' ~ 'Ocean-Side, High Elevation',
Station == 'Tide Pool' ~ 'Ocean-Side, Low Elevation',
Station == 'Spicy Bunker' ~ 'Bay-Side, Mid-Elevation',
Station == 'New New' ~ 'Ocean-Side, Mid-Elevation'))
head(fog_presence)
# create figure: line graph
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
geom_line(data = water_conversion_over0,
# change color order of graphs
mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station))) +
scale_y_continuous(name = "Leaf Wentesss (mV)", sec.axis = sec_axis(~.*day, name =expression("H"[2]*"O"~"(mL)"))) +
# remove color legend
guides(color = FALSE) +
# rename x-axis
xlab('Month') +
# rename y-axis
ylab('Leaf Wetness (mV)') +
# separate the station data into different graphs, change the order and assign colors
scale_color_manual(values = c("Ocean-Side, Low Elevation" = "#F8766D",
"Bay-Side, Mid-Elevation" = "#7CAE00",
"Ocean-Side, Mid-Elevation" = "#00BFC4",
"Ocean-Side, High Elevation" = "#C77CFF")) +
# separate station data into different graphs in this order
facet_wrap(~factor(Station,levels=c("Ocean-Side, Low Elevation",
"Bay-Side, Mid-Elevation", "Ocean-Side, Mid-Elevation",
"Ocean-Side, High Elevation"))) +
theme_classic() +
# change the axis line thickness
theme(axis.line=element_line(size=1))+
# change the axis labels color and font size
theme(axis.text=element_text(colour = 'black',size=10)) +
# change the axis titles font size and make labels bold
theme(axis.title=element_text(size=12,face="bold")) +
# bold the facet wrap titles
theme(strip.text = element_text(face = "bold"))
# load and clean up data
water_conversion_over0 <- fog_presence %>%
# select the maximum recorded mean LW by day and station
group_by(day, Station) %>%
summarize(max = max(mean_lw)) %>%
# divide the maximum number by 150.9 (already subtracted 335.9 in fog_presence)
mutate(mL = (max/150.9)) %>%
# mutate mL values where any negative value is changed to equal 0
mutate(mL = if_else(mL <= 0, 0,mL))
# create figure: line graph
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
geom_line(data = water_conversion_over0,
# change color order of graphs
mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station))) +
scale_y_continuous(name = "Leaf Wentesss (mV)", sec.axis = sec_axis(~.*day, name =expression("H"[2]*"O"~"(mL)"))) +
# remove color legend
guides(color = FALSE) +
# rename x-axis
xlab('Month') +
# rename y-axis
ylab('Leaf Wetness (mV)') +
# separate the station data into different graphs, change the order and assign colors
scale_color_manual(values = c("Ocean-Side, Low Elevation" = "#F8766D",
"Bay-Side, Mid-Elevation" = "#7CAE00",
"Ocean-Side, Mid-Elevation" = "#00BFC4",
"Ocean-Side, High Elevation" = "#C77CFF")) +
# separate station data into different graphs in this order
facet_wrap(~factor(Station,levels=c("Ocean-Side, Low Elevation",
"Bay-Side, Mid-Elevation", "Ocean-Side, Mid-Elevation",
"Ocean-Side, High Elevation"))) +
theme_classic() +
# change the axis line thickness
theme(axis.line=element_line(size=1))+
# change the axis labels color and font size
theme(axis.text=element_text(colour = 'black',size=10)) +
# change the axis titles font size and make labels bold
theme(axis.title=element_text(size=12,face="bold")) +
# bold the facet wrap titles
theme(strip.text = element_text(face = "bold"))
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
geom_line(data = water_conversion_over0,
# change color order of graphs
mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station))) +
scale_y_continuous(name = "Leaf Wentesss (mV)", sec.axis = sec_axis(~.*day, name =expression("H"[2]*"O"~"(mL)"))) +
# remove color legend
guides(color = FALSE)
head(fog_presence)
head(water_conversion_over0)
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
geom_line(data = water_conversion_over0,
# change color order of graphs
mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station)))
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
geom_line(data = water_conversion_over0,
# change color order of graphs
mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station))) +
scale_y_continuous(name = "Leaf Wentesss (mV)", sec.axis = sec_axis(~.*day, name =expression("H"[2]*"O"~"(mL)"))) +
# remove color legend
guides(color = FALSE)
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
#geom_line(data = water_conversion_over0,
# change color order of graphs
mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station))) +
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
#geom_line(data = water_conversion_over0,
# change color order of graphs
#mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station))) +
scale_y_continuous(name = "Leaf Wentesss (mV)", sec.axis = sec_axis(~.*day, name =expression("H"[2]*"O"~"(mL)"))) +
# remove color legend
guides(color = FALSE) +
# rename x-axis
xlab('Month')
# create figure: line graph
ggplot() +
geom_line(data = fog_presence,
# change color order of graphs
mapping = aes(x = day, y = mean_lw, group = Station, color = fct_rev(Station))) +
#geom_line(data = water_conversion_over0,
# change color order of graphs
#mapping = aes(x = day, y = mL, group = Station, color = fct_rev(Station))) +
scale_y_continuous(name = "Leaf Wentesss (mV)", sec.axis = sec_axis(~.day, name =expression("H"[2]*"O"~"(mL)"))) +
# remove color legend
guides(color = FALSE) +
# rename x-axis
xlab('Month') +
# rename y-axis
ylab('Leaf Wetness (mV)') +
# separate the station data into different graphs, change the order and assign colors
scale_color_manual(values = c("Ocean-Side, Low Elevation" = "#F8766D",
"Bay-Side, Mid-Elevation" = "#7CAE00",
"Ocean-Side, Mid-Elevation" = "#00BFC4",
"Ocean-Side, High Elevation" = "#C77CFF")) +
# separate station data into different graphs in this order
facet_wrap(~factor(Station,levels=c("Ocean-Side, Low Elevation",
"Bay-Side, Mid-Elevation", "Ocean-Side, Mid-Elevation",
"Ocean-Side, High Elevation"))) +
theme_classic() +
# change the axis line thickness
theme(axis.line=element_line(size=1))+
# change the axis labels color and font size
theme(axis.text=element_text(colour = 'black',size=10)) +
# change the axis titles font size and make labels bold
theme(axis.title=element_text(size=12,face="bold")) +
# bold the facet wrap titles
theme(strip.text = element_text(face = "bold"))
# load & clean up data
fog_intensity <- read_csv('./clean_data/Combined_FogMon_Data2023.csv') %>%
# select columns 1 (Station), 2 (halfhour), 5 (LWmV_17ft_Avg), 10 (LWmV_50ft_Avg),
# 15 (LWmV_66ft_Avg), 22 (Rain_mm_Tot)
select(c(1,2,5,10,15,22)) %>%
# create a column that identifies if the data records rain or no rain
mutate(rain_present = if_else(Rain_mm_Tot > 0, 'RAIN','NO RAIN')) %>%
# make the table longer by adding a column identifying the LWS distance and
# adding the mV values to another column
pivot_longer(LWmV_17ft_Avg:LWmV_66ft_Avg, names_to = 'LWS_dist_ft', values_to = 'mV') %>%
# calculate the mean lw by halfhour, Station, and if rain is present/absent
group_by(halfhour,Station,rain_present) %>%
summarize(mean_lw = mean(mV)) %>%
# fog threshold was calculated as 335.9 mV
# create a column that identifies time where there is fog and no fog
# create another column that isolates the day from halfhour column
mutate(fog_no_fog = if_else(mean_lw > 335.9, 'FOG', 'NO FOG'),
Day = date(halfhour)) %>%
# count the number of hours per day when there is/isn't fog and add to a new column
group_by(Day,Station,fog_no_fog) %>%
count(fog_no_fog, sort = TRUE, name = "n_fog_hrs") %>%
# make the table wider by adding columns FOG, NO FOG, NA from the fog_no_fog column
# and values from the n_fog_hrs column
pivot_wider(names_from =fog_no_fog, values_from = n_fog_hrs) %>%
# rename FOG column to fog_hours
rename(fog_hours = FOG) %>%
# remove columns 3 (NO FOG) and 5 (NA)
select(-3,-5) %>%
# remove any rows with missing data
remove_missing() %>%
# tally up the number of fog hours per station and day
# divide by 2 to convert the number of half hours to hours
group_by(Day,Station) %>%
tally(fog_hours/2) %>%
# rename the stations
mutate(Station = case_when( Station == 'Event Bluff' ~ 'Ocean-Side, High Elevation',
Station == 'Tide Pool' ~ 'Ocean-Side, Low Elevation',
Station == 'Spicy Bunker' ~ 'Bay-Side, Mid-Elevation',
Station == 'New New' ~ 'Ocean-Side, Mid-Elevation'))
# load & clean up data
fog_intensity <- read_csv('./data/clean_data/Combined_FogMon_Data2023.csv') %>%
# select columns 1 (Station), 2 (halfhour), 5 (LWmV_17ft_Avg), 10 (LWmV_50ft_Avg),
# 15 (LWmV_66ft_Avg), 22 (Rain_mm_Tot)
select(c(1,2,5,10,15,22)) %>%
# create a column that identifies if the data records rain or no rain
mutate(rain_present = if_else(Rain_mm_Tot > 0, 'RAIN','NO RAIN')) %>%
# make the table longer by adding a column identifying the LWS distance and
# adding the mV values to another column
pivot_longer(LWmV_17ft_Avg:LWmV_66ft_Avg, names_to = 'LWS_dist_ft', values_to = 'mV') %>%
# calculate the mean lw by halfhour, Station, and if rain is present/absent
group_by(halfhour,Station,rain_present) %>%
summarize(mean_lw = mean(mV)) %>%
# fog threshold was calculated as 335.9 mV
# create a column that identifies time where there is fog and no fog
# create another column that isolates the day from halfhour column
mutate(fog_no_fog = if_else(mean_lw > 335.9, 'FOG', 'NO FOG'),
Day = date(halfhour)) %>%
# count the number of hours per day when there is/isn't fog and add to a new column
group_by(Day,Station,fog_no_fog) %>%
count(fog_no_fog, sort = TRUE, name = "n_fog_hrs") %>%
# make the table wider by adding columns FOG, NO FOG, NA from the fog_no_fog column
# and values from the n_fog_hrs column
pivot_wider(names_from =fog_no_fog, values_from = n_fog_hrs) %>%
# rename FOG column to fog_hours
rename(fog_hours = FOG) %>%
# remove columns 3 (NO FOG) and 5 (NA)
select(-3,-5) %>%
# remove any rows with missing data
remove_missing() %>%
# tally up the number of fog hours per station and day
# divide by 2 to convert the number of half hours to hours
group_by(Day,Station) %>%
tally(fog_hours/2) %>%
# rename the stations
mutate(Station = case_when( Station == 'Event Bluff' ~ 'Ocean-Side, High Elevation',
Station == 'Tide Pool' ~ 'Ocean-Side, Low Elevation',
Station == 'Spicy Bunker' ~ 'Bay-Side, Mid-Elevation',
Station == 'New New' ~ 'Ocean-Side, Mid-Elevation'))
# calculate the median of each station
median <- fog_intensity %>%
group_by(Station) %>%
summarize(median = median(n))
# create figure: boxplot
ggplot(data = fog_intensity,
# reverse the order and color of stations
mapping = aes(x = fct_rev(Station), y = n, group = Station, fill = fct_rev(Station))) +
# remove outlier points
geom_boxplot(outlier.shape = NA) +
# add letter labels (calculated in ANOVA test section)
geom_label(data = hsd_test, mapping = aes(x = Station, y = n + 2, label = groups, fontface='bold'), label.size = NA,fill = NA) +
# remove color legend
guides(fill = FALSE) +
# rename the Station labels on x-axis
scale_x_discrete(labels = c("Ocean-Side, Low Elevation", "Bay-Side, Mid-Elevation", "Ocean-Side, Mid-Elevation", "Ocean-Side, High Elevation")) +
# rename x-axis
xlab("Station") +
# rename y-axis
ylab("Number of Fog Hours") +
theme_classic() +
# tilt x-axis labels to 45 degrees
theme(axis.text.x = element_text(angle = 45, vjust = 0.58, size = 10)) +
# change the axis line thickness
theme(axis.line=element_line(size=1))+
# change the axis labels color and font size
theme(axis.text=element_text(colour = 'black',size=10)) +
# change the axis titles font size and make labels bold
theme(axis.title=element_text(size=12,face="bold"))
# calculate ANOVA using fog intensity data
fog_aov <- aov(n ~ Station,
data = fog_intensity
)
# use HSD test and turn results into a data frame
hsd_test <- as.data.frame(HSD.test(fog_aov, trt = 'Station')$group) %>%
# make station names into a column
rownames_to_column(var = "Station")
# print summary of fog_aov
summary(fog_aov)
# create figure: boxplot
ggplot(data = fog_intensity,
# reverse the order and color of stations
mapping = aes(x = fct_rev(Station), y = n, group = Station, fill = fct_rev(Station))) +
# remove outlier points
geom_boxplot(outlier.shape = NA) +
# add letter labels (calculated in ANOVA test section)
geom_label(data = hsd_test, mapping = aes(x = Station, y = n + 2, label = groups, fontface='bold'), label.size = NA,fill = NA) +
# remove color legend
guides(fill = FALSE) +
# rename the Station labels on x-axis
scale_x_discrete(labels = c("Ocean-Side, Low Elevation", "Bay-Side, Mid-Elevation", "Ocean-Side, Mid-Elevation", "Ocean-Side, High Elevation")) +
# rename x-axis
xlab("Station") +
# rename y-axis
ylab("Number of Fog Hours") +
theme_classic() +
# tilt x-axis labels to 45 degrees
theme(axis.text.x = element_text(angle = 45, vjust = 0.58, size = 10)) +
# change the axis line thickness
theme(axis.line=element_line(size=1))+
# change the axis labels color and font size
theme(axis.text=element_text(colour = 'black',size=10)) +
# change the axis titles font size and make labels bold
theme(axis.title=element_text(size=12,face="bold"))
# print summary of fog_aov
summary(fog_aov)
# use HSD test and turn results into a data frame
hsd_test <- as.data.frame(HSD.test(fog_aov, trt = 'Station')$group) %>%
# make station names into a column
rownames_to_column(var = "Station")
hsd_test
HSD.test(fog_aov, trt = 'Station')
HSD.test(fog_aov, trt = 'Station')$group
summary(HSD.test(fog_aov, trt = 'Station'))
(HSD.test(fog_aov, trt = 'Station'))$statistics
(HSD.test(fog_aov, trt = 'Station'))$parameters
(HSD.test(fog_aov, trt = 'Station'))$means
fog_aov
summary(fog_aov)
TukeyHSD (fog_aov, conf.level=.95)
